{"version":3,"file":"static/js/39.5856941c.chunk.js","mappings":"6JAEaA,E,QAAmBC,GAAAA,IAAH,mM,SC0C7B,GAvCkBC,EAAAA,EAAAA,OAAK,SAACC,GACtB,MAA4BA,EAApBC,YAAAA,OAAR,MAAsB,EAAtB,EACMC,GAAaC,EAAAA,EAAAA,UAwBnB,OAtBAC,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAeH,EAAWI,QAAQC,SAASN,GAC3CO,EAAWH,EAAaI,WACxBC,EAAYL,EAAaM,YAGzBC,EAAeV,EAAWI,QAAQK,YAIpCE,EAAWL,EAAuB,GAAZE,EAAiC,GAAfE,EAGxCC,EAAW,IAAGA,EAAW,GAE7B,IAAMC,EARgBZ,EAAWI,QAAQS,YAQHH,EAClCC,EAAWC,IAAeD,EAAWC,GAGzCZ,EAAWI,QAAQU,MAAMC,UAAzB,qBAAmDJ,EAAnD,MACD,GAAE,CAACZ,KAEF,SAACJ,EAAD,WACE,gBAAKqB,UAAU,YAAYC,IAAKjB,EAAhC,SACGF,EAAMO,YAId,G,8GCpCYa,E,QAActB,GAAAA,IAAH,2D,SCGlBuB,GAAOtB,EAAAA,EAAAA,OAAK,WAChB,IAAMuB,EAAQ,CAAC,MAAO,MAAO,MAAO,OACpC,GAAsCC,EAAAA,EAAAA,UAAS,GAA/C,eAAOtB,EAAP,KAAoBuB,EAApB,KAEA,SAASC,IAAkC,IAAhBC,IAAe,yDACpCC,EAAWD,EAASzB,EAAc,EAAIA,EAAc,EACpD0B,EAAW,IAAGA,EAAWL,EAAMM,OAAS,GACxCD,EAAWL,EAAMM,OAAS,IAAGD,EAAW,GAC5CH,EAAeG,EAChB,CAED,OACE,UAACP,EAAD,YACE,iBAAKF,UAAU,UAAf,WACE,mBAAQW,QAAS,SAACC,GAAD,OAAOL,GAAkB,EAAzB,EAAjB,iCACA,mBAAQI,QAAS,SAACC,GAAD,OAAOL,GAAkB,EAAzB,EAAjB,oCAEF,gBAAKP,UAAU,OAAf,UACE,SAAC,IAAD,CAAWjB,YAAaA,EAAxB,SAEIqB,EAAMS,KAAI,SAACC,GAAD,OAAU,4BAAoBA,GAAPA,EAAvB,UAMrB,IAED,G","sources":["base-ui/indicator/style.js","base-ui/indicator/index.jsx","views/demo/style.js","views/demo/index.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const IndicatorWrapper = styled.div`\n  overflow: hidden;\n\n  .i-content {\n    display: flex;\n    position: relative;\n    transition: transform 200ms ease;\n\n    > * {\n      flex-shrink: 0;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport React, { memo, useEffect, useRef } from 'react';\n\nimport { IndicatorWrapper } from '@/base-ui/indicator/style';\n\nconst Indicator = memo((props) => {\n  const { selectIndex = 0 } = props;\n  const contentRef = useRef();\n\n  useEffect(() => {\n    // 1. 获取selectIndex 对应的 item\n    const selectItemEl = contentRef.current.children[selectIndex];\n    const itemLeft = selectItemEl.offsetLeft;\n    const itemWidth = selectItemEl.clientWidth;\n\n    // 2，content 的宽度\n    const contentWidth = contentRef.current.clientWidth;\n    const contentScroll = contentRef.current.scrollWidth;\n\n    // 获取 selectIndex 要滚动的距离\n    let distance = itemLeft + itemWidth * 0.5 - contentWidth * 0.5;\n\n    // 4. 特殊情况处理\n    if (distance < 0) distance = 0; // 左边特殊情况处理\n\n    const totalDistance = contentScroll - contentWidth;\n    if (distance > totalDistance) distance = totalDistance; // 右边特殊情况处理\n\n    // 5. 改变位置\n    contentRef.current.style.transform = `translate(${-distance}px)`;\n  }, [selectIndex]);\n  return (\n    <IndicatorWrapper>\n      <div className=\"i-content\" ref={contentRef}>\n        {props.children}\n      </div>\n    </IndicatorWrapper>\n  );\n});\n\nIndicator.propTypes = {\n  selectIndex: PropTypes.number,\n};\n\nexport default Indicator;\n","import styled from 'styled-components';\n\nexport const DemoWrapper = styled.div`\n  .list {\n    width: 100px;\n  }\n`;\n","import React, { memo, useState } from 'react';\n\nimport Indicator from '@/base-ui/indicator';\nimport { DemoWrapper } from '@/views/demo/style';\n\nconst Demo = memo(() => {\n  const names = ['aaa', 'bbb', 'CCC', 'DDD'];\n  const [selectIndex, setSelectIndex] = useState(0);\n\n  function toggleClickHandle(isNext = true) {\n    let newIndex = isNext ? selectIndex + 1 : selectIndex - 1;\n    if (newIndex < 0) newIndex = names.length - 1;\n    if (newIndex > names.length - 1) newIndex = 0;\n    setSelectIndex(newIndex);\n  }\n\n  return (\n    <DemoWrapper>\n      <div className=\"control\">\n        <button onClick={(e) => toggleClickHandle(false)}>上一个</button>\n        <button onClick={(e) => toggleClickHandle(true)}>下一个</button>\n      </div>\n      <div className=\"list\">\n        <Indicator selectIndex={selectIndex}>\n          {\n            names.map((item) => <button key={item}>{item}</button>)\n          }\n        </Indicator>\n      </div>\n    </DemoWrapper>\n  );\n});\n\nexport default Demo;\n"],"names":["IndicatorWrapper","styled","memo","props","selectIndex","contentRef","useRef","useEffect","selectItemEl","current","children","itemLeft","offsetLeft","itemWidth","clientWidth","contentWidth","distance","totalDistance","scrollWidth","style","transform","className","ref","DemoWrapper","Demo","names","useState","setSelectIndex","toggleClickHandle","isNext","newIndex","length","onClick","e","map","item"],"sourceRoot":""}